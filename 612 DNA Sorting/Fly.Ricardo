import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;

class Main {


	/*Clase para almacenar atributos de la cadena DNA :
	 * key : identificador unico de la entrada. Orden de entrada.
	 * Este parametro asegura la restriccion : If two or more strings are equally sorted, 
	 * list them in the same order they are in the input file.
	 * value : Valor de sortedness de la cadena.
	 * dataset : Cadena de entrada.
	 *  */
	class SetString implements Comparable<SetString>{
		int key;
		int value;
		String dataset;
		@Override
		public int compareTo(SetString o) {
			// TODO Auto-generated method stub
			if(this.value - o.value != 0) return this.value - o.value;
			return this.key - o.key;
		}
	}
	

	/*
	 *Approach para obtener el "sortedness de la cadea.
	 * Se recorre la cadena , comparando cada elemento , con sus consecutivos , 
	 * y comparando si existe una tupla de elementos tal que : j > i && A(j) < A(i).
	 */
	static int getSortedness(String dataset){
		char[] array = dataset.toCharArray();
		int sortedness = 0;
		for (int i = 0; i < array.length-1; i++) {
			for (int j = i+1; j < array.length; j++) {
				if(array[i]>array[j])	
					sortedness++;	
			}
		}
		return sortedness;
	}
	
	static void printResultDataset(ArrayList<SetString> list, boolean lastOne){
		Collections.sort(list);
		for (SetString setString : list) {
//			System.out.println("key:" + setString.key + " ,value:" + setString.value + " ,dataset:"+setString.dataset);
			System.out.println(setString.dataset);
		}
		if(!lastOne)
			System.out.println();
	}
	
	/*
	 * Modulo de lectura del archivo .in. Uso de la clase SetString.
	 */
	static void readAndProcessingFile(BufferedReader br){
		try {
			
			int count = 0;
			int M = Integer.parseInt(br.readLine());
			
			br.readLine();//The first separation line	
			
			int numLines = Integer.parseInt((br.readLine().split(" "))[1]);//Read the number of lines per dataset
			
			for ( ; count < M;) {
				String temp = br.readLine();
				if(!temp.isEmpty()){
					String[] dataset = new String[numLines];
					dataset [0] = temp;
					for (int j = 1; j < numLines; j++) {
						temp = br.readLine();
						dataset[j] = temp;
					}
					count++;
					printResultDataset(readDataSet(dataset), (count == M)?true:false);
				}
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	static ArrayList<SetString> readDataSet(String[] dataset){
		
		ArrayList<SetString> arrayList = new ArrayList<Main.SetString>();
		for (int i = 0; i < dataset.length; i++) {
			SetString tempST = new Main().new SetString();
			String line = dataset[i];
			tempST.key = i;
			tempST.value = getSortedness(line);
			tempST.dataset = line;
			arrayList.add(tempST);
		}
		return arrayList;
		
	}
	

	/*
	 * Inicio del procedimiento
	 * */
	public static void main(String[] args) {
		Main.readAndProcessingFile(new BufferedReader(new InputStreamReader(System.in)));
//		try {
//			Main.readAndProcessingFile(new BufferedReader(new FileReader("TestFile.in")));
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		}
//		System.out.close();
	}
}
